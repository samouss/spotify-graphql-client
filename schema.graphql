type Album {
  """
  @WEAK: See SpotifyAlbumGroup
  
  The field is present when getting an artist’s albums. Possible values are "album", "single",
  "compilation", "appears_on". Compare to "albumType" this field represents relationship between
  the artist and the album.
  """
  albumGroup: String

  """
  @WEAK: See SpotifyAlbumType
  
  The type of the album: one of "album" , "single" , or "compilation".
  """
  albumType: String!

  """The artists of the album."""
  artists: [Artist!]!

  """
  The markets in which the album is available: ISO 3166-1 alpha-2 country codes. Note that an
  album is considered available in a market when at least 1 of its tracks is available
  in that market.
  """
  availableMarkets: [String!]!

  """The copyright statements of the album."""
  copyrights: [Copyright!]!

  """Known external IDs for the album."""
  externalIds: ExternalIds!

  """Known external URLs for this album."""
  externalURLs: ExternalURLs!

  """
  A list of the genres used to classify the album. For example: "Prog Rock" , "Post-Grunge".
  (If not yet classified, the array is empty.)
  """
  genres: [String!]!

  """A link to the Web API endpoint providing full details of the album."""
  href: String!

  """The Spotify ID for the album."""
  id: ID!

  """The cover art for the album in a given size, fallback on largest."""
  image(size: ImageSize!): Image!

  """The cover art for the album in various sizes, widest first."""
  images: [Image!]!

  """The label for the album."""
  label: String!

  """
  The name of the album. In case of an album takedown, the value may be an empty string.
  """
  name: String!

  """
  The popularity of the album. The value will be between 0 and 100, with 100 being the most
  popular. The popularity is calculated from the popularity of the album’s individual tracks.
  """
  popularity: Int!

  """
  The date the album was first released, for example "1981". Depending on the precision,
  it might be shown as "1981-12" or "1981-12-15".
  """
  releaseDate: Date!

  """The precision with which "releaseDate" value is known."""
  releaseDatePrecision: ReleaseDatePrecision!

  """
  Part of the response when Track Relinking is applied, the original track is not available
  in the given market, and Spotify did not have any tracks to relink it with. The track response
  will still contain metadata for the original track, and a restrictions object containing the
  reason why the track is not available: `"restrictions" : {"reason" : "market"}`
  """
  restrictions: Restrictions!

  """The tracks of the album."""
  tracks(first: Int = 10, after: ID): TrackConnection!

  """
  @WEAK: check support for litteral 'album'
  
  The object type: "album"
  """
  type: String!

  """The Spotify URI for the album."""
  uri: String!
}

type AlbumConnection {
  edges: [AlbumEdge!]!
  nodes: [Album!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type AlbumEdge {
  cursor: ID!
  node: Album!
}

type Artist {
  albums(first: Int = 10, after: ID): AlbumConnection!
  externalURLs: ExternalURLs!
  followers: SpotifyFollowers!
  genres: [String!]!
  href: String!
  id: ID!

  """The cover art for the album in a given size, fallback on largest."""
  image(size: ImageSize!): Image!
  images: [Image!]!
  name: String!
  popularity: Int!
  relatedArtists: [Artist!]!

  """@WEAK"""
  topTracks(market: String = "US"): [Track!]!

  """@WEAK: check support for litteral 'artist'"""
  type: String!
  uri: String!
}

"""The copyright statements of the album."""
type Copyright {
  """The copyright text for this album."""
  text: String!

  """The type of copyright."""
  type: CopyrightType!
}

"""The type of copyright."""
enum CopyrightType {
  """The copyright."""
  C

  """The sound recording (performance) copyright."""
  P
}

"""@WEAK"""
scalar Date

"""@WEAK: see SpotifyExternalIds"""
scalar ExternalIds

"""@WEAK: see SpotifyExternalURLs"""
scalar ExternalURLs

type Image {
  url: String!
  width: Int!
  height: Int!
}

enum ImageSize {
  S
  M
  L
}

type PageInfo {
  endCursor: ID!
  hasNextPage: Boolean!
}

type Query {
  artist(id: ID!): Artist
  album(id: ID!): Album
}

"""The precision with which "releaseDate" value is known."""
enum ReleaseDatePrecision {
  YEAR
  MONTH
  DAY
}

"""@WEAK: see SpotifyRestrictions"""
scalar Restrictions

type SpotifyFollowers {
  href: String
  total: Int!
}

type Track {
  album: Album!
  artists: [Artist!]!
  availableMarkets: [String!]!
  discNumber: Int!
  durationMS: Int!
  explicit: Boolean!
  externalIds: ExternalIds!
  externalURLs: ExternalURLs!
  href: String!
  id: String!
  isLocal: Boolean!
  isPlayable: Boolean
  linkedFrom: TrackLink
  name: String!
  popularity: Int!
  previewURL: String
  restrictions: Restrictions
  trackNumber: Int!

  """@WEAK: check support for litteral 'track'"""
  type: String!
  uri: String!
}

type TrackConnection {
  edges: [TrackEdge!]!
  nodes: [Track!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type TrackEdge {
  cursor: ID!
  node: Track!
}

type TrackLink {
  externalURLs: ExternalURLs!
  href: String!
  id: String!
  type: String!
  uri: String!
}
